
---table 'topic' => rename to table 'topics'
ALTER TABLE `topic` RENAME TO `topics`;
---col 'topics.ID' => rename to 'topics.topic_id'
ALTER TABLE `topics` CHANGE COLUMN `ID` `topic_id` INT(10) NOT NULL AUTO_INCREMENT;

---table 'person' => rename to table 'users'
ALTER TABLE `person` RENAME TO `users`;
---col 'users.ID' => rename to 'users.user_id'
ALTER TABLE `users` CHANGE COLUMN `ID` `user_id` INT(10) NOT NULL AUTO_INCREMENT;
---add col 'users.type' (enum('group','anon','normal')
ALTER TABLE `users` ADD COLUMN `type` ENUM('group','anon','normal') NOT NULL DEFAULT 'normal' AFTER `lastreviewedtopic`;



---add table `rightsprofiles` ('rightsprofile_id' INT(10) autoinc,'name' varchar(20)) 
CREATE TABLE `rightsprofiles` (
`rightsprofile_id` INT( 10 ) NOT NULL AUTO_INCREMENT PRIMARY KEY ,
`name` VARCHAR( 20 ) NOT NULL
) ;


---add table `rightsprofilerightlink` (rightsprofile_id INT(10), right_name VARCHAR(20))
CREATE TABLE `rightsprofilerightlink` (
`rightsprofile_id` INT( 10 ) NOT NULL ,
`right_name` VARCHAR( 20 ) NOT NULL ,
PRIMARY KEY (`rightsprofile_id`, `right_name` )
) ;


---add table `usergrouplink` (user_id INT(10),group_id INT(10))
CREATE TABLE `usergrouplink` (
`user_id` INT( 10 ) NOT NULL ,
`group_id` INT( 10 ) NOT NULL ,
PRIMARY KEY ( `user_id` ,`group_id`)
);


CREATE TABLE `grouprightsprofilelink` (
`group_id` INT( 10 ) NOT NULL ,
`rightsprofile_id` INT( 10 ) NOT NULL ,
PRIMARY KEY ( `group_id` , `rightsprofile_id`)
);

---rename 'topicpublication' to 'topicpublicationlink'
ALTER TABLE `topicpublication` RENAME TO `topicpublicationlink`;

---rename 'persontopic' to 'usertopiclink'
ALTER TABLE `persontopic` RENAME TO `usertopiclink`;
---rename 'usertopiclink.person_id' to 'usertopiclink.user_id'
ALTER TABLE `usertopiclink` CHANGE COLUMN `person_id` `user_id` INT(10) NOT NULL DEFAULT 0;

---rename 'publication.pub_type' to 'publication.report_type'
ALTER TABLE `publication` CHANGE COLUMN `pub_type` `report_type` VARCHAR(255) NOT NULL DEFAULT '';

---rename 'author.ID' to 'author.author_id'
ALTER TABLE `author` CHANGE COLUMN `ID` `author_id` INTEGER UNSIGNED NOT NULL AUTO_INCREMENT;

---====modify the attachments table. This one is actually quite complicated, so it is split up in several statements

---modify the tables

ALTER TABLE `publicationfile` DROP PRIMARY KEY;
ALTER TABLE `publicationfile` ADD COLUMN `att_id` INTEGER UNSIGNED NOT NULL DEFAULT 0 AFTER `isremote`;
ALTER TABLE `publicationfile` MODIFY COLUMN `att_id` INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
 ADD PRIMARY KEY(`att_id`);
ALTER TABLE `publicationfile` RENAME TO `attachments`;
ALTER TABLE `attachments` CHANGE COLUMN `person_id` `user_id` INTEGER NOT NULL DEFAULT 0;

---because every attachment can belong to at most one publication, we don't bother making a separate 
---publicationattachmentlink table for now

SET VERSION TO V2.0 if all of the above is done!!!!
otherwise checkschema will complain :)

---changes for introducing new rights management: access_level per object

ALTER TABLE `publication` CHANGE COLUMN `entered_by` `user_id` INTEGER UNSIGNED NOT NULL DEFAULT 0;
ALTER TABLE `personpublicationnote` CHANGE COLUMN `person_id` `user_id` INTEGER NOT NULL DEFAULT 0;
ALTER TABLE `topics` ADD COLUMN `user_id` INTEGER UNSIGNED NOT NULL DEFAULT 0 AFTER `url`;
    -- niet vergeten bij topics: een owner instellen! waarschijnlijk wordt dat de database_manage user die de update uitvoert?

ALTER TABLE `attachments` ADD COLUMN `read_access_level` ENUM('private','public','intern','group') NOT NULL DEFAULT 'intern' AFTER `att_id`;
ALTER TABLE `publication` ADD COLUMN `read_access_level` ENUM('private','public','intern','group') NOT NULL DEFAULT 'intern' AFTER `cleantitle`;
ALTER TABLE `topics` ADD COLUMN `read_access_level` ENUM('private','public','intern','group') NOT NULL DEFAULT 'intern' AFTER `user_id`;
ALTER TABLE `personpublicationnote` ADD COLUMN `read_access_level` ENUM('private','public','intern','group') NOT NULL DEFAULT 'intern' AFTER `text`;
ALTER TABLE `attachments` ADD COLUMN `edit_access_level` ENUM('private','public','intern','group') NOT NULL DEFAULT 'intern' AFTER `att_id`;
ALTER TABLE `publication` ADD COLUMN `edit_access_level` ENUM('private','public','intern','group') NOT NULL DEFAULT 'intern' AFTER `cleantitle`;
ALTER TABLE `topics` ADD COLUMN `edit_access_level` ENUM('private','public','intern','group') NOT NULL DEFAULT 'intern' AFTER `user_id`;
ALTER TABLE `personpublicationnote` ADD COLUMN `edit_access_level` ENUM('private','public','intern','group') NOT NULL DEFAULT 'intern' AFTER `text`;

UPDATE topics SET read_access_level = 'public' WHERE topic_id = 1;

INSERT INTO `availablerights` (`name`,`description`) VALUES 
 ('attachment_read_all','read all attachments, overriding access levels'),
 ('topic_read_all','read all topics, overriding access levels'),
 ('note_read_all','read all notes, overriding access levels');
 
ALTER TABLE `personpublicationnote` RENAME TO `notes`;

---the notes.rights must be transferred to notes.read_access_level and notes.edit_access_level
UPDATE notes SET read_access_level='private',edit_access_level='private' WHERE rights='private';

---rename 'publication.type' to 'publication.pub_type'
ALTER TABLE `publication` CHANGE `type` `pub_type` ENUM( 'Article', 'Book', 'Booklet', 'Inbook', 'Incollection', 'Inproceedings', 'Manual', 'Mastersthesis', 'Misc', 'Phdthesis', 'Proceedings', 'Techreport', 'Unpublished' ) NULL DEFAULT NULL ;

INSERT INTO `availablerights` (`name`,`description`) VALUES 
 ('attachment_edit_all','edit all attachments, overriding access levels'),
 ('topic_edit_all','edit all topics, overriding access levels'),
 ('note_edit_all','edit all notes, overriding access levels');
 
------ May 5, 2007 ------
---rename publicationauthor.author to publicationauthor.author_id
ALTER TABLE `publicationauthor` CHANGE `author` `author_id` INT( 10 ) UNSIGNED NOT NULL DEFAULT '0';

---rename publicationauthor table to publicationauthorlink
ALTER TABLE `publicationauthor` RENAME TO `publicationauthorlink`;

------ May 8, 2007 ------

---add table `keywords` ('keyword_id' INT(10) autoinc,'keyword' text) 
CREATE TABLE `keywords` (
`keyword_id` INT( 10 ) NOT NULL AUTO_INCREMENT PRIMARY KEY ,
`keyword` text NOT NULL
);


---add table `publicationkeywordlink` (pub_id INT(10), keyword_id INT(10))
CREATE TABLE `publicationkeywordlink` (
`pub_id` INT( 10 ) NOT NULL ,
`keyword_id` INT( 10 ) NOT NULL ,
PRIMARY KEY (`pub_id`, `keyword_id` )
);

---copy keyword values to new keyword table, this has to be done in php, place in some controller function and run once
  function kw_convert()
  {
    $Q = $this->db->query("SELECT pub_id, keywords FROM publication");
    
    $keyword_array = array();
    foreach ($Q->result() as $row)
    {
      $keywords = preg_replace(
						'/ *([^,]+)/',
						"###\\1",
						$row->keywords);
						
      $keywords = explode('###', $keywords);
      foreach ($keywords as $keyword)
      {
        if (trim($keyword) != '')
        {
          if ((substr($keyword, -1, 1) == ',') || (substr($keyword, -1, 1) == ';'))
            $keyword = substr($keyword, 0, strlen($keyword) - 1);
          
          $keyword_array[] = array('pub_id' => $row->pub_id, 'keyword' => $keyword);
        }
      }
    }
    
    foreach ($keyword_array as $entry)
    {
      $Q = $this->db->query("SELECT keyword_id FROM keywords WHERE keyword='".$entry['keyword']."'");
      if ($Q->num_rows() > 0)
      {
        foreach ($Q->result() as $row)
        {
          $keyword_id = $row->keyword_id;
        }
      }
      else
      {
        $Q = $this->db->query("INSERT INTO keywords (keyword) VALUES (".$this->db->escape($entry['keyword']).")");
        $keyword_id = $this->db->insert_id();
      }
      
      $Q = $this->db->query("INSERT INTO publicationkeywordlink (pub_id, keyword_id) VALUES (".$entry['pub_id'].", ".$keyword_id.");");
      
      if ($this->db->affected_rows() == 1)
      {
        echo "Insert pub_id ".$entry['pub_id'].": keyword_id ".$keyword_id."<br/>";
      }
    }
  }

---remove 'keywords' field
ALTER TABLE `publication` DROP `keywords`;
---====

---=== 10-5-2007
---persistent bookmark lists

CREATE TABLE `userbookmarklists` (
`user_id` INT( 10 ) NOT NULL ,
`pub_id` INT( 10 ) NOT NULL ,
PRIMARY KEY (`user_id`, `pub_id` )
);

INSERT INTO `availablerights` (`name`,`description`) VALUES 
 ('bookmarklist','use a persistent bookmarklist');

---=== 12-may-2007
---group level access restrictions

ALTER TABLE `topics` ADD COLUMN `group_id` INTEGER UNSIGNED NOT NULL DEFAULT 0;
ALTER TABLE `publication` ADD COLUMN `group_id` INTEGER UNSIGNED NOT NULL DEFAULT 0;
ALTER TABLE `notes` ADD COLUMN `group_id` INTEGER UNSIGNED NOT NULL DEFAULT 0;
ALTER TABLE `attachments` ADD COLUMN `group_id` INTEGER UNSIGNED NOT NULL DEFAULT 0;


---=== 19 july 2007 ===
---new access level libs
---derived access levels, as determined by dependencies (e.g. a public topic with a intern parent has a derived access level of intern)
ALTER TABLE `topics`        ADD COLUMN `derived_read_access_level` ENUM('private','public','intern','group') NOT NULL DEFAULT 'intern';
ALTER TABLE `publication`  ADD COLUMN `derived_read_access_level` ENUM('private','public','intern','group') NOT NULL DEFAULT 'intern';
ALTER TABLE `notes`         ADD COLUMN `derived_read_access_level` ENUM('private','public','intern','group') NOT NULL DEFAULT 'intern';
ALTER TABLE `attachments`   ADD COLUMN `derived_read_access_level` ENUM('private','public','intern','group') NOT NULL DEFAULT 'intern';

ALTER TABLE `topics`        ADD COLUMN `derived_edit_access_level` ENUM('private','public','intern','group') NOT NULL DEFAULT 'intern';
ALTER TABLE `publication`  ADD COLUMN `derived_edit_access_level` ENUM('private','public','intern','group') NOT NULL DEFAULT 'intern';
ALTER TABLE `notes`         ADD COLUMN `derived_edit_access_level` ENUM('private','public','intern','group') NOT NULL DEFAULT 'intern';
ALTER TABLE `attachments`   ADD COLUMN `derived_edit_access_level` ENUM('private','public','intern','group') NOT NULL DEFAULT 'intern';

INSERT INTO `availablerights` (`name`,`description`) VALUES 
 ('read_all_override','read all attachments, publications, topics and notes, overriding access levels'),
 ('edit_all_override','edit all attachments, publications, topics and notes, overriding access levels');

DELETE FROM availablerights WHERE 
     name='attachment_edit_all'
  OR name='attachment_read_all'
  OR name='note_read_all'
  OR name='note_edit_all'
  OR name='topic_read_all'
  OR name='topic_edit_all';
  
UPDATE availablerights SET name='note_edit' WHERE name='note_edit_self';

UPDATE topics SET read_access_level='public',derived_read_access_level='public' where topic_id=1;

-- some default rights profiles that seem to make sense
INSERT INTO rightsprofiles VALUES ('2', 'editor_rights');
INSERT INTO rightsprofiles VALUES ('3', 'guest_rights');
INSERT INTO rightsprofiles VALUES ('4', 'admin_rights');
INSERT INTO rightsprofiles VALUES ('5', 'reader_rights');
-- Insert rightsprofilerightlink data
INSERT INTO rightsprofilerightlink VALUES ('2', 'attachment_edit');
INSERT INTO rightsprofilerightlink VALUES ('2', 'note_edit');
INSERT INTO rightsprofilerightlink VALUES ('2', 'publication_edit');
INSERT INTO rightsprofilerightlink VALUES ('2', 'topic_edit');
INSERT INTO rightsprofilerightlink VALUES ('2', 'user_edit_self');
INSERT INTO rightsprofilerightlink VALUES ('4', 'database_manage');
INSERT INTO rightsprofilerightlink VALUES ('4', 'edit_all_override');
INSERT INTO rightsprofilerightlink VALUES ('4', 'read_all_override');
INSERT INTO rightsprofilerightlink VALUES ('4', 'user_assign_rights');
INSERT INTO rightsprofilerightlink VALUES ('4', 'user_edit_all');
INSERT INTO rightsprofilerightlink VALUES ('5', 'attachment_read');
INSERT INTO rightsprofilerightlink VALUES ('5', 'note_read');
INSERT INTO rightsprofilerightlink VALUES ('5', 'topic_subscription');
INSERT INTO rightsprofilerightlink VALUES ('5', 'bookmarklist');

---still to be done:

---enlarge the 'series' field
---drop irrelevant legacy columns
---drop col 'users.u_rights'
---drop col 'users.csname'
---drop col 'notes.rights'